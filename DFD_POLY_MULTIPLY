// https://www.spoj.com/problems/POLYMUL/

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>
 
 
/* 
*    coder :: ATUL_PANDEY_2608
*        >>> INDIA <<<
*/
using namespace std;
using namespace __gnu_pbds;
 
// #define  part ..
#define pb(a) push_back(a)
#define all(a) a.begin(),a.end() 
#define mod 1000000007
//#define maxx 200006
#define ll long long 
#define quick    ios_base::sync_with_stdio(NULL),cin.tie(0);
#define listll vector< long long > 
#define listi vector< int> 
#define pii   pair<int , int> 
#define pll pair<long long , long long > 
#define minheap priority_queue<long long , vector< long long >, greater<long long > >
#define rep(i,a,b) for(int i=a;i<b;i++)
ll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}
 
 
template < class T > using oset = tree< T , null_type, less  < T  > , rb_tree_tag , tree_order_statistics_node_update > ;
 
 
// end of #define 
 
// define globals ...
const int maxx = 2e5+26;
 
//write function from here ...
 
 
 
// complex fft 
using cd = complex<double>;
const double PI = acos(-1);
 
void fft(vector<cd> & a, bool invert) {
    int n = a.size();
    if (n == 1)
        return;
 
    vector<cd> a0(n / 2), a1(n / 2);
    for (int i = 0; 2 * i < n; i++) {
        a0[i] = a[2*i];
        a1[i] = a[2*i+1];
    }
    fft(a0, invert);
    fft(a1, invert);
 
    double ang = 2 * PI / n * (invert ? -1 : 1);
    cd w(1), wn(cos(ang), sin(ang));
    for (int i = 0; 2 * i < n; i++) {
        a[i] = a0[i] + w * a1[i];
        a[i + n/2] = a0[i] - w * a1[i];
        if (invert) {
            a[i] /= 2;
            a[i + n/2] /= 2;
        }
        w *= wn;
    }
}
 
//  multiply >> 
 
 
 
vector<ll> multiply(vector<ll > const& a, vector<ll > const& b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    ll  n = 1;
    while (n < a.size() + b.size()) 
        n <<= 1;
    fa.resize(n);
    fb.resize(n);
 
    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);
 
    vector<ll > result(n);
    for (int i = 0; i < n; i++)
        result[i] = round(fa[i].real());
    return result;
}
 
 
 
 
 
 
int Main(){
	int n ;
	 int m ;
	
	cin>>n;
	n++;
	m = n;
	
	vector  < ll > a(n),b(m);
	
	for(int i=0 ; i < n;i++)
	cin>>a[i];
	
	
	for(int i=0 ; i< m;i++)
	cin>>b[i];
	
  vector < ll > ans = 	multiply(a,b);
  int cnt=n+m-1;
	for(auto it  : ans ){
		
	cout<<it <<" ";
	cnt--;
	if(cnt==0)
	break;
	
	
}
	cout<<endl;
	
	
	return 0;
	
}
 
 
 
 
 
 
 
 
 
 
int main(){
 quick;
int t =1; 
cin>>t;
while(t-- )
 Main();
 
 return 0;
 
 
}
 
 
 
